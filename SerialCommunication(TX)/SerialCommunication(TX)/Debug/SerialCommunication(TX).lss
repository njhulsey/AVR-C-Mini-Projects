
SerialCommunication(TX).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00000268  000002fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000268  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000084  00800116  00800116  00000312  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000312  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d0  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000792  00000000  00000000  00000c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000371  00000000  00000000  0000141e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000425  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000177  00000000  00000000  00001c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001dbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 39       	cpi	r26, 0x9A	; 154
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 84 00 	call	0x108	; 0x108 <main>
  9e:	0c 94 32 01 	jmp	0x264	; 0x264 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <appendSerial>:
	
	
}

void appendSerial(char c){
	serialBuffer[serialWritePos] = c;
  a6:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <serialWritePos>
  aa:	e9 2f       	mov	r30, r25
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	e6 5e       	subi	r30, 0xE6	; 230
  b0:	fe 4f       	sbci	r31, 0xFE	; 254
  b2:	80 83       	st	Z, r24
	serialWritePos ++;
  b4:	9f 5f       	subi	r25, 0xFF	; 255
	
	if(serialWritePos >= TX_BUFFER_SIZE){
  b6:	1a f0       	brmi	.+6      	; 0xbe <appendSerial+0x18>
	
}

void appendSerial(char c){
	serialBuffer[serialWritePos] = c;
	serialWritePos ++;
  b8:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <serialWritePos>
  bc:	08 95       	ret
	
	if(serialWritePos >= TX_BUFFER_SIZE){
		serialWritePos = 0;
  be:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <serialWritePos>
  c2:	08 95       	ret

000000c4 <serialWrite>:
	}
}

void serialWrite(char c[]){
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	ec 01       	movw	r28, r24
	
	for(uint8_t i = 0; i < strlen(c); i++){
  cc:	10 e0       	ldi	r17, 0x00	; 0
  ce:	07 c0       	rjmp	.+14     	; 0xde <serialWrite+0x1a>
		appendSerial(c[i]);
  d0:	fe 01       	movw	r30, r28
  d2:	e8 0f       	add	r30, r24
  d4:	f9 1f       	adc	r31, r25
  d6:	80 81       	ld	r24, Z
  d8:	0e 94 53 00 	call	0xa6	; 0xa6 <appendSerial>
	}
}

void serialWrite(char c[]){
	
	for(uint8_t i = 0; i < strlen(c); i++){
  dc:	1f 5f       	subi	r17, 0xFF	; 255
  de:	81 2f       	mov	r24, r17
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fe 01       	movw	r30, r28
  e4:	01 90       	ld	r0, Z+
  e6:	00 20       	and	r0, r0
  e8:	e9 f7       	brne	.-6      	; 0xe4 <serialWrite+0x20>
  ea:	31 97       	sbiw	r30, 0x01	; 1
  ec:	ec 1b       	sub	r30, r28
  ee:	fd 0b       	sbc	r31, r29
  f0:	8e 17       	cp	r24, r30
  f2:	9f 07       	cpc	r25, r31
  f4:	68 f3       	brcs	.-38     	; 0xd0 <serialWrite+0xc>
		appendSerial(c[i]);
	}
	
	if(UCSR0A & (1 << UDRE0)){//this checks if the data register is empty
  f6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
  fa:	85 fd       	sbrc	r24, 5
		//this forces the interrupt to fire by sending a 0
		UDR0 = 0;
  fc:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	}
	
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	1f 91       	pop	r17
 106:	08 95       	ret

00000108 <main>:

int count = 0;


int main(void)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	00 d0       	rcall	.+0      	; 0x10e <main+0x6>
 10e:	00 d0       	rcall	.+0      	; 0x110 <main+0x8>
 110:	1f 92       	push	r1
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1 << PORTB3);
 116:	23 9a       	sbi	0x04, 3	; 4
	
    UBRR0H = (BRC << 8); //this tells the chip how fast to run by shifting the brc into the register
 118:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (BRC); //theres the high and lower part of the register
 11c:	87 e6       	ldi	r24, 0x67	; 103
 11e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	//three control registers for usart: A,B,C
	
	UCSR0B |= (1 << TXEN0);//enable transmission
 122:	e1 ec       	ldi	r30, 0xC1	; 193
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 60       	ori	r24, 0x08	; 8
 12a:	80 83       	st	Z, r24
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00); //parity mode: simplest form of error detection 
 12c:	a2 ec       	ldi	r26, 0xC2	; 194
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	8c 91       	ld	r24, X
 132:	86 60       	ori	r24, 0x06	; 6
 134:	8c 93       	st	X, r24
	//^^set how big our transmission is....set to 8 bits rn
	UCSR0B |= (1 << TXCIE0); //enable transmission complete interrupt
 136:	80 81       	ld	r24, Z
 138:	80 64       	ori	r24, 0x40	; 64
 13a:	80 83       	st	Z, r24
	sei(); 
 13c:	78 94       	sei
		
		serialWrite("\n\r");
		
		_delay_ms(1000);
		
		PORTB ^= (1 << PORTB3);
 13e:	18 e0       	ldi	r17, 0x08	; 8
    while (1) 
    {
		//UDR0 = 'H';//this is the register we write to when we want send or recieve data
		//CAN ONLY BE ONE BIT OF DATA AT A TIME SO JUST A SINGLE CHARACTER 'A' OR '8' 
		//_delay_ms(1000);
		serialWrite("Look! I can count!\n\r");
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 62 00 	call	0xc4	; 0xc4 <serialWrite>
		
		char countArray[5];
		itoa(count,countArray,2);//must convert count into a char array using this method
 148:	42 e0       	ldi	r20, 0x02	; 2
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	be 01       	movw	r22, r28
 14e:	6f 5f       	subi	r22, 0xFF	; 255
 150:	7f 4f       	sbci	r23, 0xFF	; 255
 152:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 156:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 15a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <itoa>
								  //10 = decimal 2 = binary and so on
		serialWrite(countArray);
 15e:	ce 01       	movw	r24, r28
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	0e 94 62 00 	call	0xc4	; 0xc4 <serialWrite>
		count ++;
 166:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end>
 16a:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x1>
 16e:	01 96       	adiw	r24, 0x01	; 1
 170:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x1>
 174:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
		
		serialWrite("\n\r");
 178:	82 e1       	ldi	r24, 0x12	; 18
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 62 00 	call	0xc4	; 0xc4 <serialWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	2f ef       	ldi	r18, 0xFF	; 255
 182:	83 ed       	ldi	r24, 0xD3	; 211
 184:	90 e3       	ldi	r25, 0x30	; 48
 186:	21 50       	subi	r18, 0x01	; 1
 188:	80 40       	sbci	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0x7e>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0x88>
 190:	00 00       	nop
		
		_delay_ms(1000);
		
		PORTB ^= (1 << PORTB3);
 192:	85 b1       	in	r24, 0x05	; 5
 194:	81 27       	eor	r24, r17
 196:	85 b9       	out	0x05, r24	; 5
 198:	d3 cf       	rjmp	.-90     	; 0x140 <main+0x38>

0000019a <__vector_20>:
	}
	
}


ISR(USART_TX_vect){
 19a:	1f 92       	push	r1
 19c:	0f 92       	push	r0
 19e:	0f b6       	in	r0, 0x3f	; 63
 1a0:	0f 92       	push	r0
 1a2:	11 24       	eor	r1, r1
 1a4:	8f 93       	push	r24
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
	if(serialReadPos != serialWritePos){
 1aa:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <serialReadPos>
 1ae:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <serialWritePos>
 1b2:	e8 17       	cp	r30, r24
 1b4:	79 f0       	breq	.+30     	; 0x1d4 <__vector_20+0x3a>
		UDR0 = serialBuffer[serialReadPos];
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	e6 5e       	subi	r30, 0xE6	; 230
 1ba:	fe 4f       	sbci	r31, 0xFE	; 254
 1bc:	80 81       	ld	r24, Z
 1be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		serialReadPos ++;
 1c2:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <serialReadPos>
 1c6:	8f 5f       	subi	r24, 0xFF	; 255
		
		
		if(serialReadPos >= TX_BUFFER_SIZE){
 1c8:	1a f0       	brmi	.+6      	; 0x1d0 <__vector_20+0x36>


ISR(USART_TX_vect){
	if(serialReadPos != serialWritePos){
		UDR0 = serialBuffer[serialReadPos];
		serialReadPos ++;
 1ca:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <serialReadPos>
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <__vector_20+0x3a>
		
		
		if(serialReadPos >= TX_BUFFER_SIZE){
			serialReadPos = 0;
 1d0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <serialReadPos>
		}
		
		
	}
}
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	8f 91       	pop	r24
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <itoa>:
 1e4:	45 32       	cpi	r20, 0x25	; 37
 1e6:	51 05       	cpc	r21, r1
 1e8:	20 f4       	brcc	.+8      	; 0x1f2 <itoa+0xe>
 1ea:	42 30       	cpi	r20, 0x02	; 2
 1ec:	10 f0       	brcs	.+4      	; 0x1f2 <itoa+0xe>
 1ee:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__itoa_ncheck>
 1f2:	fb 01       	movw	r30, r22
 1f4:	10 82       	st	Z, r1
 1f6:	cb 01       	movw	r24, r22
 1f8:	08 95       	ret

000001fa <__itoa_ncheck>:
 1fa:	bb 27       	eor	r27, r27
 1fc:	4a 30       	cpi	r20, 0x0A	; 10
 1fe:	31 f4       	brne	.+12     	; 0x20c <__itoa_ncheck+0x12>
 200:	99 23       	and	r25, r25
 202:	22 f4       	brpl	.+8      	; 0x20c <__itoa_ncheck+0x12>
 204:	bd e2       	ldi	r27, 0x2D	; 45
 206:	90 95       	com	r25
 208:	81 95       	neg	r24
 20a:	9f 4f       	sbci	r25, 0xFF	; 255
 20c:	0c 94 09 01 	jmp	0x212	; 0x212 <__utoa_common>

00000210 <__utoa_ncheck>:
 210:	bb 27       	eor	r27, r27

00000212 <__utoa_common>:
 212:	fb 01       	movw	r30, r22
 214:	55 27       	eor	r21, r21
 216:	aa 27       	eor	r26, r26
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	aa 1f       	adc	r26, r26
 21e:	a4 17       	cp	r26, r20
 220:	10 f0       	brcs	.+4      	; 0x226 <__utoa_common+0x14>
 222:	a4 1b       	sub	r26, r20
 224:	83 95       	inc	r24
 226:	50 51       	subi	r21, 0x10	; 16
 228:	b9 f7       	brne	.-18     	; 0x218 <__utoa_common+0x6>
 22a:	a0 5d       	subi	r26, 0xD0	; 208
 22c:	aa 33       	cpi	r26, 0x3A	; 58
 22e:	08 f0       	brcs	.+2      	; 0x232 <__utoa_common+0x20>
 230:	a9 5d       	subi	r26, 0xD9	; 217
 232:	a1 93       	st	Z+, r26
 234:	00 97       	sbiw	r24, 0x00	; 0
 236:	79 f7       	brne	.-34     	; 0x216 <__utoa_common+0x4>
 238:	b1 11       	cpse	r27, r1
 23a:	b1 93       	st	Z+, r27
 23c:	11 92       	st	Z+, r1
 23e:	cb 01       	movw	r24, r22
 240:	0c 94 22 01 	jmp	0x244	; 0x244 <strrev>

00000244 <strrev>:
 244:	dc 01       	movw	r26, r24
 246:	fc 01       	movw	r30, r24
 248:	67 2f       	mov	r22, r23
 24a:	71 91       	ld	r23, Z+
 24c:	77 23       	and	r23, r23
 24e:	e1 f7       	brne	.-8      	; 0x248 <strrev+0x4>
 250:	32 97       	sbiw	r30, 0x02	; 2
 252:	04 c0       	rjmp	.+8      	; 0x25c <strrev+0x18>
 254:	7c 91       	ld	r23, X
 256:	6d 93       	st	X+, r22
 258:	70 83       	st	Z, r23
 25a:	62 91       	ld	r22, -Z
 25c:	ae 17       	cp	r26, r30
 25e:	bf 07       	cpc	r27, r31
 260:	c8 f3       	brcs	.-14     	; 0x254 <strrev+0x10>
 262:	08 95       	ret

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
