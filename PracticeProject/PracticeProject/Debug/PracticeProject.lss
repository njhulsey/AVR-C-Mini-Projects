
PracticeProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070c  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066d  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a6  00000000  00000000  00000f41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ab  00000000  00000000  0000120c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  000015b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001623  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	
	//DUE TOMORROW FLIP A TO BE
	//PINB1 == PORTB1????? PINB != PORTB
	// P[O]RT = [O]UTPUT   I/O   P[I]N = [I]NPUT
	//Button is connected to PB1 and LED is PB3
	DDRB |= (1 << PORTB3); //turn on output for pin B3 input is default
  80:	23 9a       	sbi	0x04, 3	; 4
	PORTB |= (1 << PORTB1); //this enables internal resistor 
  82:	29 9a       	sbi	0x05, 1	; 5
							//when button is not pressed = 1 when it is = 0
							//youre essentially turning on pin that is set to input
	
	DDRD |= (1 << PORTD3);
  84:	53 9a       	sbi	0x0a, 3	; 10
	//SETUP PWM on PB3 0C2A
	//TCCR2A AND TCCR2B CONTROL THE CLOCK REGISTER
	//COM2A1 CONTROLS HOW OCR2A OPPERATES
	//COM2B1 CONTROLS HOW OCR2B OPPERATES
	//WGM21 AND WGM20 CONTROL HOW 
	TCCR2A |= (1<<WGM20) | (1<<COM2A1)| (1<<WGM21) | (1 << COM2B1);
  86:	e0 eb       	ldi	r30, 0xB0	; 176
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	83 6a       	ori	r24, 0xA3	; 163
  8e:	80 83       	st	Z, r24
	OCR2A = 0;
  90:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	
	TCCR2B |= (1 << CS20) | (1 << CS22); //CLOCK SELECT (CS00 seems to have no effect) this turns on the counter 
  94:	e1 eb       	ldi	r30, 0xB1	; 177
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	85 60       	ori	r24, 0x05	; 5
  9c:	80 83       	st	Z, r24
	
	
	int brightness = 0;
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
		}
		else{
			//PORTB &= ~(1 << PORTB3);
			brightness = 0;
		}
		OCR2A = brightness;	
  a2:	a3 eb       	ldi	r26, 0xB3	; 179
  a4:	b0 e0       	ldi	r27, 0x00	; 0
		OCR2B = 150 - brightness;
  a6:	36 e9       	ldi	r19, 0x96	; 150
  a8:	e4 eb       	ldi	r30, 0xB4	; 180
  aa:	f0 e0       	ldi	r31, 0x00	; 0
	
	
	int brightness = 0;
    while (1) 
    {
		if(!(PINB & (1 << PINB1))) //REMEMBER ([1<<]PINB1)
  ac:	19 99       	sbic	0x03, 1	; 3
  ae:	10 c0       	rjmp	.+32     	; 0xd0 <main+0x50>
		{
			brightness += 10;
  b0:	0a 96       	adiw	r24, 0x0a	; 10
		
			if(brightness >= 150)
  b2:	86 39       	cpi	r24, 0x96	; 150
  b4:	91 05       	cpc	r25, r1
  b6:	14 f0       	brlt	.+4      	; 0xbc <main+0x3c>
				brightness = 0;
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	47 ee       	ldi	r20, 0xE7	; 231
  c0:	53 e0       	ldi	r21, 0x03	; 3
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	40 40       	sbci	r20, 0x00	; 0
  c6:	50 40       	sbci	r21, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <main+0x42>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <main+0x4c>
  cc:	00 00       	nop
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <main+0x54>
			//PORTB |= (1 << PORTB3);
			_delay_ms(80);
		}
		else{
			//PORTB &= ~(1 << PORTB3);
			brightness = 0;
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
		}
		OCR2A = brightness;	
  d4:	8c 93       	st	X, r24
		OCR2B = 150 - brightness;
  d6:	23 2f       	mov	r18, r19
  d8:	28 1b       	sub	r18, r24
  da:	20 83       	st	Z, r18
		
    }
  dc:	e7 cf       	rjmp	.-50     	; 0xac <main+0x2c>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
